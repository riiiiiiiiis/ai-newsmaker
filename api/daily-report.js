import { createHash } from 'crypto';

export default async function handler(req, res) {
  const startTime = Date.now();
  const runId = generateRunId();
  
  // Enhanced logging function
  const log = (step, message, data = {}) => {
    const timestamp = new Date().toISOString();
    const elapsed = Date.now() - startTime;
    console.log(`[${runId}] [${timestamp}] [${elapsed}ms] ${step}: ${message}`, data);
  };

  log('START', 'Daily report execution started', { 
    headers: Object.keys(req.headers), 
    method: req.method 
  });

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ cron secret –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (req.headers['authorization'] !== `Bearer ${process.env.CRON_SECRET}`) {
    log('AUTH', 'Authorization failed - invalid secret');
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  log('AUTH', 'Authorization successful');

  try {
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å GitHub
    log('FETCH', 'Fetching content from GitHub...');
    const mdContent = await fetchMarkdownContent();
    log('FETCH', 'Content fetched successfully', { 
      sourceLength: mdContent.length,
      sourcePreview: mdContent.substring(0, 100) + '...'
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    log('HASH', 'Checking for content changes...');
    if (!hasContentChanged(mdContent)) {
      log('HASH', 'No changes detected - skipping report');
      return res.json({ 
        message: 'No changes detected',
        runId,
        duration: Date.now() - startTime
      });
    }
    log('HASH', 'Content changes detected - proceeding with report');
    
    // 4. –ê–Ω–∞–ª–∏–∑ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —á–µ—Ä–µ–∑ OpenRouter
    log('ANALYZE', 'Starting AI analysis and trend extraction...');
    const analysisStart = Date.now();
    const analyzedContent = await translateWithOpenRouter(mdContent);
    const analysisTime = Date.now() - analysisStart;
    log('ANALYZE', 'AI analysis completed', { 
      inputLength: mdContent.length,
      outputLength: analyzedContent.length,
      analysisTime: analysisTime,
      efficiency: `${((analyzedContent.length / mdContent.length) * 100).toFixed(1)}% compression`
    });
    
    // 5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram  
    log('FORMAT', 'Formatting for Telegram...');
    const telegramText = formatForTelegram(analyzedContent);
    log('FORMAT', 'Formatting completed', { 
      finalLength: telegramText.length,
      withinLimit: telegramText.length <= 4096,
      charUtilization: `${((telegramText.length / 4096) * 100).toFixed(1)}%`
    });
    
    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∫–∞–Ω–∞–ª
    log('SEND', 'Sending to Telegram channel...');
    const sendStart = Date.now();
    const sendResult = await sendToTelegram(telegramText);
    const sendTime = Date.now() - sendStart;
    log('SEND', 'Message sent successfully', { 
      messageId: sendResult?.message_id,
      sendTime: sendTime,
      channelId: process.env.TELEGRAM_CHANNEL_ID
    });
    
    // 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ hash –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    await saveContentHash(mdContent);
    log('HASH', 'Content hash saved for next run');
    
    const totalTime = Date.now() - startTime;
    log('SUCCESS', 'Daily report completed successfully', {
      totalDuration: totalTime,
      stages: {
        fetch: 'completed',
        analyze: analysisTime,
        format: 'completed', 
        send: sendTime
      },
      metrics: {
        sourceChars: mdContent.length,
        finalChars: telegramText.length,
        compressionRatio: `${((telegramText.length / mdContent.length) * 100).toFixed(1)}%`
      }
    });
    
    return res.json({ 
      success: true, 
      message: 'Daily report sent successfully',
      runId,
      duration: totalTime,
      metrics: {
        sourceLength: mdContent.length,
        finalLength: telegramText.length,
        analysisTime: analysisTime,
        sendTime: sendTime
      }
    });
    
  } catch (error) {
    const totalTime = Date.now() - startTime;
    log('ERROR', 'Daily report failed', {
      error: error.message,
      stack: error.stack,
      duration: totalTime
    });
    
    console.error(`[${runId}] Full error details:`, error);
    
    return res.status(500).json({ 
      error: error.message,
      runId,
      duration: totalTime
    });
  }
}

// Generate unique run ID for tracking
function generateRunId() {
  return 'run_' + Date.now().toString(36) + Math.random().toString(36).substr(2, 5);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å GitHub
async function fetchMarkdownContent() {
  const response = await fetch(process.env.GITHUB_RAW_URL);
  
  if (!response.ok) {
    throw new Error(`Failed to fetch content: ${response.statusText}`);
  }
  
  return await response.text();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ hash
function hasContentChanged(newContent) {
  const newHash = createHash('sha256').update(newContent).digest('hex');
  const lastHash = process.env.LAST_CONTENT_HASH || '';
  
  return newHash !== lastHash;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ hash –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Vercel KV)
async function saveContentHash(content) {
  const hash = createHash('sha256').update(content).digest('hex');
  // –í MVP –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ KV –∏–ª–∏ –±–∞–∑—É
  console.log('New content hash:', hash);
}

// –ê–Ω–∞–ª–∏–∑ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —á–µ—Ä–µ–∑ OpenRouter API
async function translateWithOpenRouter(content) {
  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://github.com/reddit-ai-trends-bot',
      'X-Title': 'Reddit AI Trends Bot'
    },
    body: JSON.stringify({
      model: 'google/gemini-2.5-flash',
      messages: [{
        role: 'system',
        content: `–¢—ã - AI –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ UX-–ø–∏—Å–∞—Ç–µ–ª—å –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –æ —Ç—Ä–µ–Ω–¥–∞—Ö AI.
                  –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –û–î–ù–û –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∞–∫—Å 3500 —Å–∏–º–≤–æ–ª–æ–≤) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                  
                  –§–û–†–ú–ê–¢ –°–û–û–ë–©–ï–ù–ò–Ø:
                  
                  üî• AI –¢—Ä–µ–Ω–¥—ã Reddit | [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY]
                  
                  üìä –ì–õ–ê–í–ù–û–ï –°–ï–ì–û–î–ù–Ø:
                  ‚Ä¢ [–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ 1 - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞]
                  ‚Ä¢ [–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ 2 - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞]
                  ‚Ä¢ [–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ 3 - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞]
                  
                  üèÜ –¢–û–ü-5 –¢–†–ï–ù–î–û–í:
                  
                  1. [Emoji] [–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]
                     ‚Üí [–û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –∏ –∫–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ]
                  
                  2. [Emoji] [–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]
                     ‚Üí [–û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –∏ –∫–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ]
                  
                  [–ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è —Ç–æ–ø-5]
                  
                  üí° –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: github.com/liyedanpdx/reddit-ai-trends
                  
                  –ü–†–ê–í–ò–õ–ê:
                  - –í—ã–±–µ—Ä–∏ 5 –°–ê–ú–´–• –≤–∞–∂–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: score, comments, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
                  - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: üöÄ (–ø—Ä–æ—Ä—ã–≤), üí∞ (—ç–∫–æ–Ω–æ–º–∏–∫–∞/UBI), ü§ñ (–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å), üé® (–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ AI), üî• (–≥–æ—Ä—è—á–∞—è —Ç–µ–º–∞), üí¨ (–¥–∏—Å–∫—É—Å—Å–∏—è), ‚ö° (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å), üß™ (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)
                  - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤
                  - –ò–Ω—Å–∞–π—Ç—ã –¥–æ–ª–∂–Ω—ã –æ–±—ä—è—Å–Ω—è—Ç—å –ü–û–ß–ï–ú–£ —ç—Ç–æ –≤–∞–∂–Ω–æ, –∞ –Ω–µ –ß–¢–û –ø—Ä–æ–∏–∑–æ—à–ª–æ
                  - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –æ—Å—Ç–∞–≤–ª—è–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (LLM, GPU, MoE, –∏ —Ç.–¥.)
                  - –ü–∏—à–∏ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞
                  - –ù–ï –≤–∫–ª—é—á–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ Reddit –ø–æ—Å—Ç—ã
                  - –ù–ï —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ scores –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`
      }, {
        role: 'user',
        content: content
      }],
      temperature: 0.3,
      max_tokens: 4000
    })
  });
  
  if (!response.ok) {
    throw new Error(`OpenRouter API error: ${response.statusText}`);
  }
  
  const data = await response.json();
  return data.choices[0].message.content;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, —Ç.–∫. AI —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç)
function formatForTelegram(text) {
  // AI —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  // –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
  const formatted = text.trim();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (formatted.length > 4096) {
    console.warn('Message exceeds 4096 chars, truncating...');
    return formatted.substring(0, 4000) + '\n\n... [–æ–±—Ä–µ–∑–∞–Ω–æ]';
  }
  
  return formatted;
}



// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(text) {
  const response = await fetch(
    `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
    {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHANNEL_ID,
        text: text,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      })
    }
  );
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Telegram API error: ${errorText}`);
  }
  
  const result = await response.json();
  console.log('Message sent successfully!', { messageId: result.result?.message_id });
  
  return result.result; // Return the message result for logging
}