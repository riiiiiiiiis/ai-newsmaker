// Test sending the new format to Telegram
import { config } from 'dotenv';
config({ path: '.env.local' });
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function testSendNew() {
  console.log('üöÄ Testing new format with actual Telegram sending...\n');
  
  try {
    // 1. Fetch content
    console.log('1Ô∏è‚É£ Fetching Reddit trends...');
    const response = await fetch(process.env.GITHUB_RAW_URL);
    if (!response.ok) {
      throw new Error(`Failed to fetch: ${response.statusText}`);
    }
    const content = await response.text();
    console.log(`   ‚úÖ Fetched ${content.length} characters\n`);
    
    // 2. Extract and analyze trends
    console.log('2Ô∏è‚É£ Analyzing and extracting top trends...');
    const analyzed = await analyzeContent(content);
    console.log(`   ‚úÖ Generated ${analyzed.length} characters\n`);
    
    // 3. Display preview
    console.log('üì± PREVIEW:');
    console.log('=' .repeat(50));
    console.log(analyzed);
    console.log('=' .repeat(50));
    console.log(`\nüìè Message length: ${analyzed.length} characters`);
    
    // 4. Ask for confirmation
    rl.question('\nüí¨ Send to Telegram channel? (y/n): ', async (answer) => {
      if (answer.toLowerCase() === 'y') {
        console.log('\nüì§ Sending to Telegram...');
        await sendToTelegram(analyzed);
        console.log('‚úÖ Sent successfully!');
      } else {
        console.log('‚ùå Cancelled');
      }
      rl.close();
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    rl.close();
  }
}

async function analyzeContent(content) {
  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://github.com/reddit-ai-trends-bot',
      'X-Title': 'Reddit AI Trends Bot'
    },
    body: JSON.stringify({
      model: 'google/gemini-2.5-flash',
      messages: [{
        role: 'system',
        content: `–¢—ã - AI –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ UX-–ø–∏—Å–∞—Ç–µ–ª—å –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –æ —Ç—Ä–µ–Ω–¥–∞—Ö AI.
                  –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –û–î–ù–û –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∞–∫—Å 3500 —Å–∏–º–≤–æ–ª–æ–≤) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                  
                  –§–û–†–ú–ê–¢ –°–û–û–ë–©–ï–ù–ò–Ø:
                  
                  üî• AI –¢—Ä–µ–Ω–¥—ã Reddit | [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY]
                  
                  üìä –ì–õ–ê–í–ù–û–ï –°–ï–ì–û–î–ù–Ø:
                  ‚Ä¢ [–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ 1 - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞]
                  ‚Ä¢ [–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ 2 - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞]
                  ‚Ä¢ [–ö–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ 3 - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞]
                  
                  üèÜ –¢–û–ü-5 –¢–†–ï–ù–î–û–í:
                  
                  1. [Emoji] [–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]
                     ‚Üí [–û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –∏ –∫–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ]
                  
                  2. [Emoji] [–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]
                     ‚Üí [–û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –∏ –∫–∞–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ]
                  
                  [–ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è —Ç–æ–ø-5]
                  
                  üí° –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: github.com/liyedanpdx/reddit-ai-trends
                  
                  –ü–†–ê–í–ò–õ–ê:
                  - –í—ã–±–µ—Ä–∏ 5 –°–ê–ú–´–• –≤–∞–∂–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: score, comments, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
                  - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: üöÄ (–ø—Ä–æ—Ä—ã–≤), üí∞ (—ç–∫–æ–Ω–æ–º–∏–∫–∞/UBI), ü§ñ (–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å), üé® (–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ AI), üî• (–≥–æ—Ä—è—á–∞—è —Ç–µ–º–∞), üí¨ (–¥–∏—Å–∫—É—Å—Å–∏—è), ‚ö° (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å), üß™ (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)
                  - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤
                  - –ò–Ω—Å–∞–π—Ç—ã –¥–æ–ª–∂–Ω—ã –æ–±—ä—è—Å–Ω—è—Ç—å –ü–û–ß–ï–ú–£ —ç—Ç–æ –≤–∞–∂–Ω–æ, –∞ –Ω–µ –ß–¢–û –ø—Ä–æ–∏–∑–æ—à–ª–æ
                  - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –æ—Å—Ç–∞–≤–ª—è–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (LLM, GPU, MoE, –∏ —Ç.–¥.)
                  - –ü–∏—à–∏ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞
                  - –ù–ï –≤–∫–ª—é—á–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ Reddit –ø–æ—Å—Ç—ã
                  - –ù–ï —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ scores –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`
      }, {
        role: 'user',
        content: content
      }],
      temperature: 0.3,
      max_tokens: 4000
    })
  });
  
  if (!response.ok) {
    throw new Error(`OpenRouter API error: ${response.statusText}`);
  }
  
  const data = await response.json();
  return data.choices[0].message.content;
}

async function sendToTelegram(text) {
  const response = await fetch(
    `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
    {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHANNEL_ID,
        text: text,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      })
    }
  );
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Telegram API error: ${errorText}`);
  }
}

// Run the test
testSendNew();