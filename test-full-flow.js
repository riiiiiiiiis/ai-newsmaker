// –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram)
import 'dotenv/config';
import { createHash } from 'crypto';

const GITHUB_RAW_URL = process.env.GITHUB_RAW_URL || 'https://raw.githubusercontent.com/liyedanpdx/reddit-ai-trends/main/reports/latest_report_en.md';
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || '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';

// –ö–æ–ø–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ daily-report.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function fetchMarkdownContent() {
  const response = await fetch(GITHUB_RAW_URL);
  if (!response.ok) {
    throw new Error(`Failed to fetch content: ${response.statusText}`);
  }
  return await response.text();
}

function hasContentChanged(newContent) {
  const newHash = createHash('sha256').update(newContent).digest('hex');
  const lastHash = process.env.LAST_CONTENT_HASH || '';
  return newHash !== lastHash;
}

async function translateWithOpenRouter(content) {
  // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
  const firstPart = content.split('\n').slice(0, 25).join('\n');
  
  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
      'Content-Type': 'application/json',
      'HTTP-Referer': 'https://github.com/reddit-ai-trends-bot',
      'X-Title': 'Reddit AI Trends Bot'
    },
    body: JSON.stringify({
      model: 'google/gemini-2.5-flash',
      messages: [{
        role: 'system',
        content: `–¢—ã - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–¥–∞—Ö AI –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
                  –°–æ—Ö—Ä–∞–Ω–∏ –í–°–ï —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
                  –ü–†–ï–û–ë–†–ê–ó–£–ô —Ç–∞–±–ª–∏—Ü—ã –≤ —á–∏—Ç–∞–µ–º—ã–µ —Å–ø–∏—Å–∫–∏.
                  –ê–¥–∞–ø—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
                  –ù–ï –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`
      }, {
        role: 'user',
        content: firstPart
      }],
      temperature: 0.3,
      max_tokens: 4000
    })
  });
  
  if (!response.ok) {
    throw new Error(`OpenRouter API error: ${response.statusText}`);
  }
  
  const data = await response.json();
  return data.choices[0].message.content;
}

function formatForTelegram(text) {
  return text
    .replace(/^# (.+)$/gm, '<b>$1</b>')  // –ì–ª–∞–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    .replace(/^## (.+)$/gm, '<b>$1</b>') // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏  
    .trim();
}

function splitTextByLength(text, maxLength = 4096) {
  if (text.length <= maxLength) {
    return [text];
  }
  
  const chunks = [];
  let currentChunk = '';
  
  const lines = text.split('\n');
  
  for (const line of lines) {
    if (currentChunk.length + line.length + 1 <= maxLength) {
      currentChunk += (currentChunk ? '\n' : '') + line;
    } else {
      if (currentChunk) {
        chunks.push(currentChunk);
        currentChunk = line;
      } else {
        chunks.push(line.substring(0, maxLength));
        currentChunk = line.substring(maxLength);
      }
    }
  }
  
  if (currentChunk) {
    chunks.push(currentChunk);
  }
  
  return chunks;
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
async function testFullFlow() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...\n');
  
  try {
    console.log('1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å GitHub...');
    const mdContent = await fetchMarkdownContent();
    console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mdContent.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
    
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
    const hasChanged = hasContentChanged(mdContent);
    console.log(`   ${hasChanged ? '‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è' : '‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è'}\n`);
    
    console.log('3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ OpenRouter...');
    const translatedContent = await translateWithOpenRouter(mdContent);
    console.log(`   ‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ ${translatedContent.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
    
    console.log('4Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram...');
    const telegramText = formatForTelegram(translatedContent);
    console.log(`   ‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ ${telegramText.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
    
    console.log('5Ô∏è‚É£ –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏...');
    const chunks = splitTextByLength(telegramText, 4096);
    console.log(`   ‚úÖ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π\n`);
    
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('=' + '='.repeat(50));
    chunks.forEach((chunk, i) => {
      const message = chunks.length > 1 
        ? `üìä <b>AI –¢—Ä–µ–Ω–¥—ã Reddit [–ß–∞—Å—Ç—å ${i+1}/${chunks.length}]</b>\n\n${chunk}`
        : `üìä <b>AI –¢—Ä–µ–Ω–¥—ã Reddit</b>\n\n${chunk}`;
      
      console.log(`\nüîπ –ß–∞—Å—Ç—å ${i+1} (${message.length} —Å–∏–º–≤–æ–ª–æ–≤):`);
      console.log(message.substring(0, 500) + (message.length > 500 ? '\n...\n[–û–ë–†–ï–ó–ê–ù–û]' : ''));
      console.log('-'.repeat(30));
    });
    
    console.log('\n‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
    console.log('üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('üì± –ì–æ—Ç–æ–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    process.exit(1);
  }
}

testFullFlow();