// –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ OpenRouter API
import 'dotenv/config';

const GITHUB_RAW_URL = process.env.GITHUB_RAW_URL || 'https://raw.githubusercontent.com/liyedanpdx/reddit-ai-trends/main/reports/latest_report_en.md';

// –†–µ–∞–ª—å–Ω—ã–π OpenRouter API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞
const OPENROUTER_API_KEY = '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';

async function testTranslation() {
  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å GitHub...');
    const response = await fetch(GITHUB_RAW_URL);
    const content = await response.text();
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    const firstPart = content.split('\n').slice(0, 20).join('\n');
    
    console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫):');
    console.log('=' + '='.repeat(50));
    console.log(firstPart);
    console.log('=' + '='.repeat(50));
    
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤ OpenRouter...');
    console.log('‚ö†Ô∏è  –ù—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // API –∫–ª—é—á –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç
    
    const translationResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://github.com/reddit-ai-trends-bot',
        'X-Title': 'Reddit AI Trends Bot Test'
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [{
          role: 'system',
          content: `–¢—ã - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–¥–∞—Ö AI –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
                    –°–æ—Ö—Ä–∞–Ω–∏ –í–°–ï —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
                    –ü–†–ï–û–ë–†–ê–ó–£–ô —Ç–∞–±–ª–∏—Ü—ã –≤ —á–∏—Ç–∞–µ–º—ã–µ —Å–ø–∏—Å–∫–∏.
                    –ê–¥–∞–ø—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
                    –ù–ï –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`
        }, {
          role: 'user',
          content: firstPart
        }],
        temperature: 0.3,
        max_tokens: 4000
      })
    });
    
    if (!translationResponse.ok) {
      throw new Error(`OpenRouter API error: ${translationResponse.statusText}`);
    }
    
    const data = await translationResponse.json();
    const translatedText = data.choices[0].message.content;
    
    console.log('‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:');
    console.log('=' + '='.repeat(50));
    console.log(translatedText);
    console.log('=' + '='.repeat(50));
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('  - –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:', firstPart.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('  - –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä:', translatedText.length, '—Å–∏–º–≤–æ–ª–æ–≤'); 
    console.log('  - –õ–∏–º–∏—Ç Telegram:', 4096, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('  - –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞:', translatedText.length <= 4096 ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ OpenRouter...');
testTranslation();